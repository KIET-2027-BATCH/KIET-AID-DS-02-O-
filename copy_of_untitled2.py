# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LbaGea1ec63lzoOAYysGKQrMwG5zkPT2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("/content/data.csv")
data

data.isnull()

data.dropna()

# Import necessary libraries
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score

# Step 1: Data Acquisition
# Download historical data for Tesla
ticker = 'TSLA'
data = yf.download(ticker, start='2010-01-01', end='2023-01-01')
data.reset_index(inplace=True)

# Step 2: Data Preprocessing
# Create features and target variable
data['Prev Close'] = data['Close'].shift(1)
data['Prev Volume'] = data['Volume'].shift(1)

# Drop rows with NaN values
data.dropna(inplace=True)

# Select features and target
X = data[['Prev Close', 'Prev Volume']]
y = data['Close']

# Step 3: Train-Test Split
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Model Training
# Create and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Model Evaluation
# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae:.2f}')
print(f'R-squared: {r2:.2f}')

# Step 6: Visualization
# Visualize the predicted vs. actual closing prices
plt.figure(figsize=(14, 7))
plt.plot(y_test.index, y_test, label='Actual Prices', color='blue')
plt.plot(y_test.index, y_pred, label='Predicted Prices', color='red')
plt.title('Tesla Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()